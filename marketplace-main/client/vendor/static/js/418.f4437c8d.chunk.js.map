{"version":3,"file":"static/js/418.f4437c8d.chunk.js","mappings":"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","sources":["layouts/Auth/ModernLayout.js","layouts/Auth/styles.js","modules/Register/components/StoreDetails/schema.js","modules/Register/components/StoreDetails/index.js","modules/Register/components/StoreCategory/schema.js","modules/Register/components/StoreCategory/index.js","modules/Register/components/ContactForm/schema.js","modules/Register/components/ContactForm/index.js","modules/Register/components/VerifyOTP/schema.js","modules/Register/components/VerifyOTP/index.js","modules/Register/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Box, Stack, Typography } from '@mui/material';\r\n\r\nimport Logo from 'assets/images/logo.png'\r\nimport useStyles from './styles';\r\n\r\nexport const Layout = (props) => {\r\n    const { children } = props;\r\n    const classes = useStyles()\r\n    return (\r\n        <Box className={classes.container}>\r\n            <Box className={classes.leftBanner}>\r\n                <Box maxWidth=\"md\">\r\n                    <Typography\r\n                        sx={{ mb: 1 }}\r\n                        variant=\"h4\"\r\n                    >\r\n                        Welcome to Rocket Scooter Marketplace\r\n                    </Typography>\r\n                    <Typography color=\"text.secondary\"\r\n                        sx={{ mb: 4 }}\r\n                    >\r\n                        Your gateway to a community of trading enthusiasts and a hub of premium trading tools and resources.\r\n                    </Typography>\r\n                    <Typography\r\n                        variant=\"subtitle2\"\r\n                        sx={{ mb: 2 }}\r\n                    >\r\n                        Join a network of reputable vendors and trading experts.\r\n                    </Typography>\r\n\r\n                </Box>\r\n            </Box>\r\n            <Box className={classes.loginForm}>\r\n                <div>\r\n                    <Box sx={{ mb: 4 }}>\r\n                        <Stack\r\n                            alignItems=\"center\"\r\n                            component={NavLink}\r\n                            direction=\"row\"\r\n                            display=\"inline-flex\"\r\n                            href='/'\r\n                            spacing={1}\r\n                            sx={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Box>\r\n                                <img src={Logo} alt='logo' className={classes.logo} />\r\n                            </Box>\r\n                        </Stack>\r\n                    </Box>\r\n                    {children}\r\n                </div>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nLayout.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n","import { alpha } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    return {\r\n        container: {\r\n            backgroundColor: theme.palette.background.default,\r\n            display: 'flex',\r\n            flex: '1 1 auto',\r\n            flexDirection: 'row',\r\n            minHeight: '100vh',\r\n            [theme.breakpoints.down('sm')]: {\r\n                flexDirection: \"column-reverse\"\r\n            }\r\n        },\r\n        leftBanner: {\r\n            alignItems: 'center',\r\n            backgroundColor: theme.palette.neutral[800],\r\n            backgroundImage: 'url(\"/assets/images/gradient-bg.svg\")',\r\n            backgroundPosition: 'top center',\r\n            backgroundRepeat: 'no-repeat',\r\n            color: theme.palette.common.white,\r\n            display: 'flex',\r\n            flex: '1 1 auto',\r\n            justifyContent: 'center',\r\n            padding: 64,\r\n            [theme.breakpoints.down('sm')]: {\r\n                flex: '0 0 auto',\r\n                padding: 32\r\n            }\r\n        },\r\n        loginForm: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            display: 'flex',\r\n            flex: '0 0 auto',\r\n            flexDirection: 'column',\r\n            justifyContent: \"start\",\r\n            maxWidth: '100%',\r\n            padding: 64,\r\n            paddingTop: 100,\r\n            width: 600,\r\n            [theme.breakpoints.down('sm')]: {\r\n                flex: '1 1 auto',\r\n                padding: 32,\r\n                paddingTop: 32\r\n            }\r\n        },\r\n        logo: {\r\n            display: 'inline-flex',\r\n            height: 'auto',\r\n            width: '120px',\r\n        }\r\n    };\r\n});\r\n\r\nexport default useStyles;\r\n","\r\nimport * as Yup from 'yup';\r\n\r\nexport const schema = Yup.object({\r\n    name: Yup\r\n        .string()\r\n        .max(255)\r\n        .required('Store name is required'),\r\n    description: Yup\r\n        .string()\r\n        .min(100, 'Description must be at least 100 characters')\r\n        .max(255, 'Description must be 255 characters or less')\r\n        .required('Description is required')\r\n});","import { Button, Stack, TextField, Typography } from \"@mui/material\"\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { schema } from './schema'\r\n\r\nconst StoreDetails = ({ onSubmit }) => {\r\n    const initialValues = {\r\n        name: '',\r\n        description: '',\r\n        twitter: '',\r\n        facebook: '',\r\n        instagram: '',\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema: schema,\r\n        onSubmit: () => { }\r\n    });\r\n\r\n    const handleSubmit = () => {\r\n        onSubmit(formik.values)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Stack sx={{ mb: 4 }} spacing={1}>\r\n                <Typography variant=\"h5\">\r\n                    Let's create your new store\r\n                </Typography>\r\n            </Stack>\r\n            <Stack spacing={3}>\r\n                <TextField\r\n                    autoFocus\r\n                    error={!!(formik.touched.name && formik.errors.name)}\r\n                    fullWidth\r\n                    helperText={formik.touched.name && formik.errors.name}\r\n                    label=\"Store name\"\r\n                    name=\"name\"\r\n                    onBlur={formik.handleBlur}\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.name}\r\n                />\r\n                <TextField\r\n                    error={!!(formik.touched.description && formik.errors.description)}\r\n                    fullWidth\r\n                    helperText={formik.touched.description && formik.errors.description}\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                    onBlur={formik.handleBlur}\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.description}\r\n                    rows={3}\r\n                />\r\n                <TextField\r\n                    error={!!(formik.touched.twitter && formik.errors.twitter)}\r\n                    fullWidth\r\n                    helperText={formik.touched.twitter && formik.errors.twitter}\r\n                    label=\"Twitter (optional)\"\r\n                    name=\"twitter\"\r\n                    onBlur={formik.handleBlur}\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.twitter}\r\n                />\r\n                <TextField\r\n                    error={!!(formik.touched.facebook && formik.errors.facebook)}\r\n                    fullWidth\r\n                    helperText={formik.touched.facebook && formik.errors.facebook}\r\n                    label=\"Facebook (optional)\"\r\n                    name=\"facebook\"\r\n                    onBlur={formik.handleBlur}\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.facebook}\r\n                />\r\n                <TextField\r\n                    error={!!(formik.touched.instagram && formik.errors.instagram)}\r\n                    fullWidth\r\n                    helperText={formik.touched.instagram && formik.errors.instagram}\r\n                    label=\"Instagram (optional)\"\r\n                    name=\"instagram\"\r\n                    onBlur={formik.handleBlur}\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.instagram}\r\n                />\r\n                <Button\r\n                    fullWidth\r\n                    sx={{ mt: 3 }}\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    onClick={handleSubmit}\r\n                    disabled={!formik.dirty || !formik.isValid}\r\n                >\r\n                    Continue\r\n                </Button>\r\n            </Stack>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StoreDetails","\r\nimport * as Yup from 'yup';\r\n\r\nexport const schema = Yup.object({\r\n    categories: Yup\r\n        .array()\r\n        .min(1, 'At least one category is required')\r\n        .required('At least one category is required')\r\n});","import { Stack, Typography, Chip, Button, FormHelperText } from '@mui/material'\r\nimport { useFormik } from 'formik';\r\n\r\nimport { schema } from './schema'\r\n\r\nconst options = [\r\n    {\r\n        label: 'Technical indicators',\r\n        value: 'technical-indicators'\r\n    },\r\n    {\r\n        label: 'Trading Communities',\r\n        value: 'trading-communities'\r\n    },\r\n    {\r\n        label: 'Alerts',\r\n        value: 'Alerts'\r\n    },\r\n    {\r\n        label: 'Discord Bots',\r\n        value: 'discord-bots'\r\n    },\r\n    {\r\n        label: 'Scanner Settings',\r\n        value: 'scanner-settings'\r\n    },\r\n    {\r\n        label: 'Newsletters and Information',\r\n        value: 'newsletters-and-information'\r\n    }, {\r\n        label: 'Trading Funding Program',\r\n        value: 'trading-funding-program'\r\n    }\r\n]\r\n\r\nconst StoreCategory = ({ onSubmit }) => {\r\n    const initialValues = {\r\n        categories: [],\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema: schema,\r\n        onSubmit: () => { }\r\n    });\r\n\r\n    const handleSubmit = () => {\r\n        onSubmit(formik.values)\r\n    }\r\n\r\n    const onChangeCategory = (value) => {\r\n        formik.setFieldValue(\r\n            \"categories\",\r\n            formik.values.categories.includes(value)\r\n                ? formik.values.categories.filter(category => category !== value)\r\n                : [...formik.values.categories, value]\r\n        );\r\n    };\r\n    console.log(formik)\r\n    return (\r\n        <>\r\n            <Stack spacing={1}>\r\n                <Typography\r\n                    color=\"text.secondary\"\r\n                    variant=\"overline\"\r\n                >\r\n                    What are you selling?\r\n                </Typography>\r\n                <Stack\r\n                    alignItems=\"center\"\r\n                    direction=\"row\"\r\n                    flexWrap=\"wrap\"\r\n                    gap={2}\r\n                >\r\n                    {options.map((option) => (\r\n                        <Chip\r\n                            key={option.label}\r\n                            label={option.label}\r\n                            onClick={() => onChangeCategory?.(option.value)}\r\n                            sx={{\r\n                                borderColor: 'transparent',\r\n                                borderRadius: 1.5,\r\n                                borderStyle: 'solid',\r\n                                borderWidth: 2,\r\n                                ...(formik.values.categories.find(category => category === option.value) && {\r\n                                    borderColor: 'primary.main'\r\n                                })\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </Stack>\r\n            </Stack>\r\n            {!!(formik.errors.categories) && (\r\n                <FormHelperText sx={{ mt: 3, color: 'error.main' }}>\r\n                    {formik.errors.categories}\r\n                </FormHelperText>\r\n            )}\r\n            <Button\r\n                fullWidth\r\n                sx={{ mt: 4 }}\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                onClick={handleSubmit}\r\n                disabled={!formik.dirty || !formik.isValid}\r\n            >\r\n                Continue\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StoreCategory","import * as Yup from 'yup';\r\n\r\nexport const schema = Yup.object({\r\n    email: Yup\r\n        .string()\r\n        .email('Invalid email address')\r\n        .required('Email is required'),\r\n    phone: Yup\r\n        .string()\r\n        .matches(\r\n            /^(\\+\\d{1,2}\\s?)?1?\\-?\\.?\\s?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/,\r\n            'Invalid mobile number'\r\n        )\r\n        .required('Mobile number is required')\r\n});","import { useFormik } from \"formik\";\r\nimport { Button, Stack, TextField } from \"@mui/material\"\r\n\r\nimport { schema } from './schema'\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n    const initialValues = {\r\n        phone:'',\r\n        email:'',\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema: schema,\r\n        onSubmit: () => { }\r\n    });\r\n\r\n    const handleSubmit = () => {\r\n        onSubmit(formik.values)\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={3}>\r\n            <TextField\r\n                autoFocus\r\n                error={!!(formik.touched.phone && formik.errors.phone)}\r\n                fullWidth\r\n                helperText={formik.touched.phone && formik.errors.phone}\r\n                label=\"Mobile Number\"\r\n                name=\"phone\"\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.phone}\r\n            />\r\n            <TextField\r\n                error={!!(formik.touched.email && formik.errors.email)}\r\n                fullWidth\r\n                helperText={formik.touched.email && formik.errors.email}\r\n                label=\"Email address\"\r\n                name=\"email\"\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.email}\r\n                type=\"email\"\r\n            />\r\n            <Button\r\n                fullWidth\r\n                sx={{ mt: 3 }}\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                onClick={handleSubmit}\r\n                disabled={!formik.dirty || !formik.isValid}\r\n            >\r\n                Continue\r\n            </Button>\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default ContactForm","\r\nimport * as Yup from 'yup';\r\n\r\nexport const schema = Yup.object({\r\n    emailCode: Yup\r\n        .string()\r\n        .length(6, 'Email code must be exactly 6 characters')\r\n        .required('Email code is required'),\r\n    phoneCode: Yup\r\n        .string()\r\n        .length(6, 'Mobile code must be exactly 6 characters')\r\n        .required('Mobile code is required')\r\n});\r\n","import { Button, Stack, TextField } from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { schema } from './schema'\r\n\r\nconst VerifyOTP = ({ onSubmit }) => {\r\n    const initialValues = {\r\n        emailCode: '',\r\n        phoneCode: ''\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema: schema,\r\n        onSubmit: () => { }\r\n    });\r\n\r\n    const handleSubmit = () => {\r\n        onSubmit(formik.values);\r\n    }\r\n    console.log(formik)\r\n    return (\r\n        <Stack spacing={3}>\r\n            <TextField\r\n                autoFocus\r\n                error={!!(formik.touched.emailCode && formik.errors.emailCode)}\r\n                fullWidth\r\n                helperText={formik.touched.emailCode && formik.errors.emailCode}\r\n                label=\"Email OTP\"\r\n                name=\"emailCode\"\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.emailCode}\r\n            />\r\n            <TextField\r\n                error={!!(formik.touched.phoneCode && formik.errors.phoneCode)}\r\n                fullWidth\r\n                helperText={formik.touched.phoneCode && formik.errors.phoneCode}\r\n                label=\"Mobile OTP\"\r\n                name=\"phoneCode\"\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.phoneCode}\r\n            />\r\n            <Button\r\n                fullWidth\r\n                sx={{ mt: 3 }}\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                onClick={handleSubmit}\r\n                disabled={!formik.dirty || !formik.isValid}\r\n            >\r\n                Continue\r\n            </Button>\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default VerifyOTP","import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Box, Link, Stack, SvgIcon, Typography } from \"@mui/material\";\r\nimport ArrowLeft from \"@untitled-ui/icons-react/build/esm/ArrowLeft\";\r\n\r\nimport { Layout as AuthLayout } from 'layouts/Auth/ModernLayout';\r\nimport { ContactForm, StoreCategory, StoreDetails, VerifyOTP } from \"./components\";\r\n\r\nconst Onboarding = () => {\r\n    const [stage, setStage] = useState(1)\r\n    const [storeDetails, setStoreDetails] = useState('')\r\n    const [categories, setCategories] = useState([])\r\n    const [contact, setContact] = useState()\r\n\r\n    const handleSubmit = (data) => {\r\n        if (stage === 1) {\r\n            setStoreDetails(data)\r\n        } else if (stage === 2) {\r\n            setCategories(data)\r\n        } else if (stage === 3) {\r\n            setContact(data)\r\n        }\r\n\r\n        setStage((prevState) => prevState + 1)\r\n        console.log(storeDetails)\r\n        console.log(categories)\r\n        console.log(contact)\r\n    }\r\n\r\n    return (\r\n        <AuthLayout>\r\n            {stage === 1 && (<StoreDetails onSubmit={handleSubmit} />)}\r\n            {stage === 2 && (<StoreCategory onSubmit={handleSubmit} />)}\r\n            {stage === 3 && (<ContactForm onSubmit={handleSubmit} />)}\r\n            {stage === 4 && (<VerifyOTP onSubmit={handleSubmit} />)}\r\n            {stage === 5 && (\r\n                <Stack sx={{ mb: 4 }} spacing={3}>\r\n                    <Box sx={{ mb: 4 }}>\r\n                        <Link\r\n                            color=\"text.primary\"\r\n                            component={NavLink}\r\n                            to='/'\r\n                            sx={{\r\n                                alignItems: 'center',\r\n                                display: 'inline-flex'\r\n                            }}\r\n                            underline=\"hover\"\r\n                        >\r\n                            <SvgIcon sx={{ mr: 1 }}>\r\n                                <ArrowLeft />\r\n                            </SvgIcon>\r\n                            <Typography variant=\"subtitle2\">\r\n                                Home\r\n                            </Typography>\r\n                        </Link>\r\n                    </Box>\r\n                    <Typography variant=\"h5\">\r\n                        Thank You for Signing Up!\r\n                    </Typography>\r\n                    <Typography variant=\"p\" sx={{ color: 'text.secondary' }}>\r\n                        Our sales team will contact you shortly. Feel free to explore our platform.\r\n                    </Typography>\r\n                </Stack>\r\n            )}\r\n        </AuthLayout>\r\n    );\r\n};\r\n\r\nexport default Onboarding;\r\n"],"names":["Layout","props","children","classes","useStyles","_jsxs","Box","className","container","_jsx","leftBanner","maxWidth","Typography","sx","mb","variant","color","loginForm","Stack","alignItems","component","NavLink","direction","display","href","spacing","textDecoration","src","Logo","alt","logo","makeStyles","theme","_defineProperty","backgroundColor","palette","background","default","flex","flexDirection","minHeight","breakpoints","down","neutral","backgroundImage","backgroundPosition","backgroundRepeat","common","white","justifyContent","padding","paper","paddingTop","width","height","schema","Yup","name","max","required","description","min","_ref","onSubmit","formik","useFormik","initialValues","twitter","facebook","instagram","validationSchema","_Fragment","TextField","autoFocus","error","touched","errors","fullWidth","helperText","label","onBlur","handleBlur","onChange","handleChange","value","values","rows","Button","mt","size","type","onClick","disabled","dirty","isValid","categories","options","onChangeCategory","setFieldValue","includes","filter","category","concat","_toConsumableArray","console","log","flexWrap","gap","map","option","Chip","_objectSpread","borderColor","borderRadius","borderStyle","borderWidth","find","FormHelperText","email","phone","matches","emailCode","length","phoneCode","_useState","useState","_useState2","_slicedToArray","stage","setStage","_useState3","_useState4","storeDetails","setStoreDetails","_useState5","_useState6","setCategories","_useState7","_useState8","contact","setContact","handleSubmit","data","prevState","AuthLayout","StoreDetails","StoreCategory","ContactForm","VerifyOTP","Link","to","underline","SvgIcon","mr","ArrowLeft"],"sourceRoot":""}